@page "/"
@using Microsoft.JSInterop
@using System.Text
@using Microsoft.AspNetCore.Components
@using TextFileEditor.Services
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Text File Editor</PageTitle>

<div class="header-section">    
    <div class="row mb-3">
        <div class="col-md-8">
            <div class="collapse" id="helpSection">
                <div class="card card-body">
                    <h6>URL Content Loading</h6>
                    <p><strong>Load content from URL:</strong> Add <code>?content=base64EncodedContent</code> to the URL</p>
                    <p><strong>Optional filename:</strong> Add <code>&filename=myfile.log</code> to set the filename</p>
                    <p><strong>Example:</strong> <code>yoursite.com/?content=SGVsbG8gV29ybGQ%3D&filename=hello.txt</code></p>
                    <p><strong>Share button:</strong> Use the Share button to generate a URL with current editor content</p>
                </div>
            </div>
        </div>
    </div>
      <div class="mb-3">
        <div class="row align-items-center">
            <div class="col-md-6">
                <div class="input-group">
                    <input type="file" class="form-control" @ref="fileInput" accept=".txt,.js,.ts,.cs,.html,.css,.json,.xml,.md,.py,.java,.cpp,.c,.h,.sql,.log" />                    <button class="btn btn-primary" @onclick="LoadFile" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        }
                        Load File
                    </button>
                    <button class="btn btn-success ms-2" @onclick="SaveFile" disabled="@(!editorInitialized || isLoading)">
                        <i class="bi bi-download"></i> Save
                    </button>
                    <button class="btn btn-outline-secondary ms-2" @onclick="ShareContent" disabled="@(!editorInitialized || isLoading)">
                        <i class="bi bi-share"></i> Share
                    </button>
                    <button class="btn btn-info ms-2" @onclick="PadLines" disabled="@(!HasContent() || isLoading)">
                        <i class="bi bi-arrow-return-right"></i> Pad Lines
                    </button>
                </div>
                @if (hasUrlContent)
                {
                    <small class="text-muted mt-1">Content loaded from URL parameter</small>
                }
            </div>
            <div class="col-md-6">
                <div class="row">
                    <div class="col-md-6">
                        <select class="form-select" @onchange="ChangeLanguage">
                            <option value="plaintext">Plain Text</option>
                            <option value="javascript">JavaScript</option>
                            <option value="typescript">TypeScript</option>
                            <option value="csharp">C#</option>
                            <option value="html">HTML</option>
                            <option value="css">CSS</option>
                            <option value="json">JSON</option>
                            <option value="xml">XML</option>
                            <option value="markdown">Markdown</option>
                            <option value="python">Python</option>
                            <option value="java">Java</option>
                            <option value="cpp">C++</option>
                            <option value="sql">SQL</option>
                        </select>
                    </div>
                    <div class="col-md-6">
                        <select class="form-select" @onchange="ChangeTheme">
                            <option value="vs-dark">Dark</option>
                            <option value="vs">Light</option>
                            <option value="hc-black">High Contrast</option>
                        </select>
                    </div>
                </div>
            </div>
        </div>
    </div>    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @errorMessage
            <button type="button" class="btn-close" @onclick="ClearError"></button>
        </div>
    }

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @successMessage
            <button type="button" class="btn-close" @onclick="ClearSuccess"></button>
        </div>
    }

    @if (!string.IsNullOrEmpty(currentFileName))
    {
        <div class="alert alert-info" role="alert">
            <strong>Current File:</strong> @currentFileName (@currentFileSize KB)
        </div>
    }
</div>

<div class="editor-section">
    <div class="editor-container">
        <div id="monaco-editor" style="border: 1px solid #ccc;"></div>
    </div>
</div>

@code {
    private ElementReference fileInput;    private bool isLoading = false;
    private string errorMessage = "";
    private string successMessage = "";
    private string currentFileName = "";
    private string currentFileSize = "";
    private string currentLanguage = "plaintext";
    private string currentTheme = "vs-light";
    private bool editorInitialized = false;
    private bool hasUrlContent = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {        if (firstRender)
        {            try
            {
                await JSRuntime.InvokeVoidAsync("monacoEditorInterop.init", "monaco-editor", currentLanguage, currentTheme);
                editorInitialized = true;
                
                // Check for URL parameters after editor is initialized
                await LoadContentFromUrl();
            }
            catch (Exception ex)
            {
                errorMessage = $"Failed to initialize editor: {ex.Message}";
                StateHasChanged();
            }
        }
    }

    private async Task LoadFile()
    {
        if (!editorInitialized)
        {
            errorMessage = "Editor not initialized yet. Please wait a moment and try again.";
            StateHasChanged();
            return;
        }

        isLoading = true;
        errorMessage = "";
        StateHasChanged();

        try
        {
            var fileResult = await JSRuntime.InvokeAsync<FileResult>("fileReaderInterop.readFileAsText", fileInput);
            
            currentFileName = fileResult.FileName;
            currentFileSize = Math.Round(fileResult.FileSize / 1024.0, 2).ToString();
            
            // Auto-detect language based on file extension
            var extension = Path.GetExtension(fileResult.FileName).ToLower();
            var detectedLanguage = DetectLanguageFromExtension(extension);
            if (detectedLanguage != currentLanguage)
            {
                currentLanguage = detectedLanguage;
                await JSRuntime.InvokeVoidAsync("monacoEditorInterop.setLanguage", currentLanguage);
            }

            var content = fileResult.Content ?? "";

            await JSRuntime.InvokeVoidAsync("monacoEditorInterop.setValue", content);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading file: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ChangeLanguage(ChangeEventArgs e)
    {
        if (editorInitialized)
        {
            currentLanguage = e.Value?.ToString() ?? "plaintext";
            await JSRuntime.InvokeVoidAsync("monacoEditorInterop.setLanguage", currentLanguage);
        }
    }

    private async Task ChangeTheme(ChangeEventArgs e)
    {
        if (editorInitialized)
        {
            currentTheme = e.Value?.ToString() ?? "vs-dark";
            await JSRuntime.InvokeVoidAsync("monacoEditorInterop.setTheme", currentTheme);
        }
    }

    private void ClearError()
    {
        errorMessage = "";
    }
    
    private void ClearSuccess()
    {
        successMessage = "";
    }

    private async Task SaveFile()
    {
        if (!editorInitialized)
        {
            errorMessage = "Editor not initialized yet.";
            StateHasChanged();
            return;
        }

        try
        {
            errorMessage = "";
            successMessage = "";
            
            // Check if JavaScript functions exist
            var jsObjectExists = await JSRuntime.InvokeAsync<bool>("eval", "typeof window.fileDownloadInterop !== 'undefined'");
            var jsFunctionExists = await JSRuntime.InvokeAsync<bool>("eval", "typeof window.fileDownloadInterop?.downloadTextFile === 'function'");
            
            if (!jsObjectExists || !jsFunctionExists)
            {
                errorMessage = "JavaScript download functionality not loaded. Please refresh the page and try again.";
                StateHasChanged();
                return;
            }
            
            // Get the current content from Monaco Editor
            var content = await JSRuntime.InvokeAsync<string>("monacoEditorInterop.getValue");
            
            if (string.IsNullOrEmpty(content))
            {
                errorMessage = "No content to save. The editor is empty.";
                StateHasChanged();
                return;
            }

            // Determine filename - use current file name or default
            var filename = !string.IsNullOrEmpty(currentFileName) 
                ? currentFileName 
                : $"edited-file-{DateTime.Now:yyyy-MM-dd-HH-mm-ss}.txt";

            // Download the file using JavaScript interop
            var success = await JSRuntime.InvokeAsync<bool>("fileDownloadInterop.downloadTextFile", content, filename);
            
            if (success)
            {
                successMessage = $"File '{filename}' has been downloaded successfully!";
            }
            else
            {
                errorMessage = "Failed to download the file. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving file: {ex.Message}";
        }
        finally
        {
            StateHasChanged();
        }
    }    private async Task ShareContent()
    {
        if (!editorInitialized)
        {
            errorMessage = "Editor not initialized yet.";
            StateHasChanged();
            return;
        }

        try
        {
            successMessage = "";
            errorMessage = "";
            
            // Debug: Check if JavaScript function exists
            var jsObjectExists = await JSRuntime.InvokeAsync<bool>("eval", "typeof window.urlContentInterop !== 'undefined'");
            var jsFunctionExists = await JSRuntime.InvokeAsync<bool>("eval", "typeof window.urlContentInterop?.generateShareableUrl === 'function'");
            
            if (!jsObjectExists)
            {
                errorMessage = "JavaScript urlContentInterop object not found. Please refresh the page.";
                StateHasChanged();
                return;
            }
            
            if (!jsFunctionExists)
            {
                errorMessage = "JavaScript generateShareableUrl function not found. Please refresh the page.";
                StateHasChanged();
                return;
            }
            
            var content = await JSRuntime.InvokeAsync<string>("monacoEditorInterop.getValue");
            
            if (string.IsNullOrEmpty(content))
            {
                errorMessage = "No content to share. Please load a file or add some content first.";
                StateHasChanged();
                return;
            }            var filename = !string.IsNullOrEmpty(currentFileName) ? currentFileName : "shared-content.log";
            var shareUrl = await JSRuntime.InvokeAsync<string>("urlContentInterop.generateShareableUrl", content, filename);
            var copied = await JSRuntime.InvokeAsync<bool>("urlContentInterop.copyToClipboard", shareUrl);
            
            if (copied)
            {
                successMessage = "Shareable URL copied to clipboard! Anyone can access this content by visiting the URL.";
            }
            else
            {
                errorMessage = "Failed to copy URL to clipboard. Please copy it manually: " + shareUrl;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error generating shareable URL: {ex.Message}";
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task PadLines()
    {
        if (!editorInitialized)
        {
            errorMessage = "Editor not initialized yet.";
            StateHasChanged();
            return;
        }

        try
        {
            errorMessage = "";
            successMessage = "";
            
            var content = await JSRuntime.InvokeAsync<string>("monacoEditorInterop.getValue");
            
            if (string.IsNullOrEmpty(content))
            {
                errorMessage = "No content to pad. Please load a file or add some content first.";
                StateHasChanged();
                return;
            }

            // Use the TextProcessor service to pad lines
            var paddedContent = TextProcessor.PadLines(content);
            
            // Set the modified content back to the editor
            await JSRuntime.InvokeVoidAsync("monacoEditorInterop.setValue", paddedContent);
            
            successMessage = "Lines have been padded successfully!";
        }
        catch (Exception ex)
        {
            errorMessage = $"Error padding lines: {ex.Message}";
        }
        finally
        {
            StateHasChanged();
        }
    }

    private bool HasContent()
    {
        return editorInitialized && (!string.IsNullOrEmpty(currentFileName) || hasUrlContent);
    }

    private string DetectLanguageFromExtension(string extension)
    {
        return extension switch
        {
            ".js" => "javascript",
            ".ts" => "typescript",
            ".cs" => "csharp",
            ".html" => "html",
            ".css" => "css",
            ".json" => "json",
            ".xml" => "xml",
            ".md" => "markdown",
            ".py" => "python",
            ".java" => "java",
            ".cpp" or ".cc" or ".cxx" => "cpp",
            ".c" => "c",
            ".h" or ".hpp" => "cpp",
            ".sql" => "sql",
            ".log" => "plaintext",
            _ => "plaintext"
        };
    }    private async Task LoadContentFromUrl()
    {
        try
        {
            var uri = new Uri(Navigation.Uri);
            var queryString = uri.Query;
            
            if (!string.IsNullOrEmpty(queryString))
            {
                var queryParams = ParseQueryString(queryString);
                var encodedContent = queryParams.GetValueOrDefault("content");
                var fileName = queryParams.GetValueOrDefault("filename", "URL-Content.log");
                var isCompressed = queryParams.GetValueOrDefault("compressed") == "1";
                
                if (!string.IsNullOrEmpty(encodedContent))
                {
                    string decodedContent;
                    
                    if (isCompressed)
                    {
                        // Handle compressed content using JavaScript decompression
                        decodedContent = await DecompressBase64Content(encodedContent);
                    }
                    else
                    {
                        // Handle uncompressed content (backward compatibility)
                        decodedContent = DecodeBase64(encodedContent);
                    }
                    
                    if (!string.IsNullOrEmpty(decodedContent))
                    {
                        // Set the content in the editor
                        await JSRuntime.InvokeVoidAsync("monacoEditorInterop.setValue", decodedContent);
                        
                        // Update file info
                        currentFileName = fileName;
                        currentFileSize = Math.Round(Encoding.UTF8.GetByteCount(decodedContent) / 1024.0, 2).ToString();
                        hasUrlContent = true;
                        
                        // Auto-detect language based on file extension
                        var extension = Path.GetExtension(fileName).ToLower();
                        var detectedLanguage = DetectLanguageFromExtension(extension);
                        if (detectedLanguage != currentLanguage)
                        {
                            currentLanguage = detectedLanguage;
                            await JSRuntime.InvokeVoidAsync("monacoEditorInterop.setLanguage", currentLanguage);
                        }
                        
                        StateHasChanged();
                    }
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading content from URL: {ex.Message}";
            StateHasChanged();
        }
    }
    
    private Dictionary<string, string> ParseQueryString(string queryString)
    {
        var result = new Dictionary<string, string>();
        
        if (string.IsNullOrEmpty(queryString))
            return result;
            
        // Remove leading '?' if present
        if (queryString.StartsWith("?"))
            queryString = queryString.Substring(1);
            
        var pairs = queryString.Split('&');
        foreach (var pair in pairs)
        {
            var parts = pair.Split('=', 2);
            if (parts.Length == 2)
            {
                var key = Uri.UnescapeDataString(parts[0]);
                var value = Uri.UnescapeDataString(parts[1]);
                result[key] = value;
            }
        }
          return result;
    }
    
    private async Task<string> DecompressBase64Content(string encodedContent)
    {
        try
        {
            // Handle URL-safe base64 encoding
            encodedContent = encodedContent.Replace('-', '+').Replace('_', '/');
            
            // Add padding if necessary
            while (encodedContent.Length % 4 != 0)
            {
                encodedContent += "=";
            }
            
            // Convert base64 to bytes
            var compressedBytes = Convert.FromBase64String(encodedContent);
            
            // Use JavaScript decompression
            var result = await JSRuntime.InvokeAsync<string>("urlContentInterop.decompressString", compressedBytes);
            return result;
        }
        catch (Exception ex)
        {
            throw new InvalidOperationException($"Failed to decompress base64 content: {ex.Message}");
        }
    }
    
    private string DecodeBase64(string encodedContent)
    {
        try
        {
            // Handle URL-safe base64 encoding
            encodedContent = encodedContent.Replace('-', '+').Replace('_', '/');
            
            // Add padding if necessary
            while (encodedContent.Length % 4 != 0)
            {
                encodedContent += "=";
            }
            
            var bytes = Convert.FromBase64String(encodedContent);
            return Encoding.UTF8.GetString(bytes);
        }
        catch (Exception ex)
        {
            throw new InvalidOperationException($"Failed to decode base64 content: {ex.Message}");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (editorInitialized)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("monacoEditorInterop.dispose");
            }
            catch
            {
                // Ignore disposal errors
            }
        }
    }

    public class FileResult
    {
        public string Content { get; set; } = "";
        public string FileName { get; set; } = "";
        public long FileSize { get; set; }
        public string FileType { get; set; } = "";
    }
}
